#!/bin/bash

# COLORS
GREEN=$(tput setaf 2)
ORANGE=$(tput setaf 3)
RED=$(tput setaf 1)
BLUE=$(tput setaf 4)
CYAN=$(tput setaf 6)
BLACK=$(tput setaf 0)
RESET=$(tput setaf 7)

# CONST STRING PROMPTS
export notsupported="${RED}This path is not supported${RESET}"

# PROMPTS
sys.log.hr() {
	echo "------------------------------------------------------------"
}

sys.log.hR() {
	echo "============================================================"
}

sys.log.info() {
	echo "${GREEN}$1${RESET}"
}

sys.log.h1() {
	echo "${BLUE}$1${RESET}"
}

sys.log.h2() {
	echo "${CYAN}$1${RESET}"
}

sys.log.h1r() {
	echo "${BLUE}$1${RESET}"
	sys.log.hr
}

sys.log.h2r() {
	echo "${CYAN}$1${RESET}"
	sys.log.hr
}

sys.log.hr1r() {
	sys.log.hr
	echo "${BLUE}$1${RESET}"
	sys.log.hr
}

sys.log.hr2r() {
	sys.log.hr
	echo "${CYAN}$1${RESET}"
	sys.log.hr
}

sys.log.warn() {
	echo "${ORANGE}$1${RESET}"
}

sys.log.error() {
	if [ "$1" = "" ]; then
		echo "$notsupported"
	else
		echo "${RED}$1${RESET}"
	fi
}

# Shell utilities

# sys.shell.* - Shell specifications

sys.shell.zsh() {
	if [[ "$(ps -o args= -p $$)" = *"zsh"* ]]; then
		return 0
	else
		return 1
	fi
}

sys.shell.envfile() {
	if sys.shell.zsh; then
		echo "$HOME/.zshrc"
	else
		echo "$HOME/.bashrc"
	fi
	return 0
}

sys.shell.completionfile() {
	if sys.shell.zsh; then
		echo "$HOME/.zshrc"
	else
		echo "$HOME/.bash_completion"
	fi
	return 0
}

sys.shell.tostring() {
	sys.log.h1r "Shell:"
	if sys.shell.zsh; then
		echo "zsh (0_0)"
	else
		echo "bash (-_-)"
	fi
}

# System specifications

# sys.cpu.* - CPU specifications

sys.cpu.architecture() {
	uname -m
}

sys.cpu.model() {
	if sys.os.mac; then
		system_profiler SPHardwareDataType | grep "Chip" | cut -d ":" -f2 | cut -d " " -f2-
	else
		sys.util.trim "$(lscpu | grep "Model name" | cut -d ":" -f2 | cut -d " " -f2-)"
	fi
}

sys.cpu.cores() {
	if sys.os.mac; then
		system_profiler SPHardwareDataType | grep "Cores" | cut -d ":" -f2 | cut -d " " -f2-
	else
		sys.util.trim "$(lscpu | grep "Core(s) per socket" | cut -d ":" -f2 | cut -d " " -f2-)"
	fi
}

sys.cpu.threads() {
	if sys.os.mac; then
		top -s 0 -l 2 | grep threads | cut -d " " -f2 | head -n 1
	else
		sys.util.trim "$(lscpu | grep "Thread(s) per core" | cut -d ":" -f2 | cut -d " " -f2-)"
	fi
}

sys.cpu.total() {
	if sys.os.mac; then
		sys.cpu.cores
	else
		sys.util.trim "$(lscpu | grep "CPU(s)" | cut -d ":" -f2 | cut -d " " -f2-)"
	fi
}

sys.cpu.tostring() {
	sys.log.h1r "CPU:"
	sys.log.h2 "Architecture: ${RESET}$(sys.cpu.architecture)"
	sys.log.h2 "Model: ${RESET}$(sys.cpu.model)"
	sys.log.h2 "Cores: ${RESET}$(sys.cpu.cores)"
	sys.log.h2 "Threads: ${RESET}$(sys.cpu.threads)"
	sys.log.h2 "Total: ${RESET}$(sys.cpu.total)"
}


# sys.gpu.* - GPU specifications

sys.gpu.vendor() {
	if sys.os.mac; then
		system_profiler SPDisplaysDataType | grep "Chipset Model" | cut -d ":" -f2 | cut -d " " -f2
	else
		lspci | grep VGA | cut -d ":" -f3 | cut -d " " -f2
	fi
}

sys.gpu.model() {
	if sys.os.mac; then
		system_profiler SPDisplaysDataType | grep "Chipset Model" | cut -d ":" -f2 | cut -d " " -f3-
	else
		lspci | grep VGA | cut -d ":" -f3 | cut -d " " -f3-
	fi
}

sys.gpu.driver() {
	if sys.os.mac; then
		system_profiler SPDisplaysDataType | grep "Driver Version" | cut -d ":" -f2 | cut -d " " -f2-
	else
		lspci -k | grep -EA3 'VGA|3D|Display' | grep "Kernel driver in use:" | cut -d ":" -f2 | cut -d " " -f2-
	fi
}

sys.gpu.tostring() {
	sys.log.h1r "GPU:"
	sys.log.h2 "Vendor: ${RESET}$(sys.gpu.vendor)"
	sys.log.h2 "Model: ${RESET}$(sys.gpu.model)"
	sys.log.h2 "Driver: ${RESET}$(sys.gpu.driver)"
}

# sys.mem.* - Memory specifications

sys.mem.pagesize() {
	getconf PAGESIZE
}

sys.mem.total() {
	if sys.os.mac; then
		system_profiler SPHardwareDataType | grep "Memory:" | cut -d ":" -f2 | cut -d " " -f2-
	else
		free -h | grep Mem | awk '{print $2}'
	fi
}

sys.mem.used() {
	if sys.os.mac; then
		used=$(vm_stat | grep "Pages active" | awk '{ print $3 }' | sed 's/\.//')
		echo "$((used * $(sys.mem.pagesize) / 1024 / 1024 / 1024)) GB"
	else
		free -h | grep Mem | awk '{print $3}'
	fi
}

sys.mem.free() {
	if sys.os.mac; then
		free=$(vm_stat | grep "Pages free" | awk '{ print $3 }' | sed 's/\.//')
		echo "$((free * $(sys.mem.pagesize) / 1024 / 1024 / 1024)) GB"
	else
		free -h | grep Mem | awk '{print $4}'
	fi
}

sys.mem.shared() {
	if sys.os.mac; then
		shared=$(vm_stat | grep "Pages occupied by compressor" | awk '{ print $5 }' | sed 's/\.//')
		echo "$((shared * $(sys.mem.pagesize) / 1024 / 1024 / 1024)) GB"
	else
		free -h | grep Mem | awk '{print $5}'
	fi
}

sys.mem.buffcache() {
	if sys.os.mac; then
		purgeable=$(vm_stat | grep "Pages purgeable" | awk '{ print $3 }' | sed 's/\.//')
		echo "$((purgeable * $(sys.mem.pagesize) / 1024 / 1024)) MB"
	else
		free -h | grep Mem | awk '{print $6}'
	fi
}

sys.mem.available() {
	if sys.os.mac; then
		inactive=$(vm_stat | grep "Pages inactive" | awk '{ print $3 }' | sed 's/\.//')
		echo "$((inactive * $(sys.mem.pagesize) / 1024 / 1024 / 1024)) GB"
	else
		free -h | grep Mem | awk '{print $7}'
	fi
}

sys.mem.tostring() {
	sys.log.h1r "MEMORY:"
	sys.log.h2r "Total: ${RESET}$(sys.mem.total)"
	sys.log.h2 "Used: ${RESET}$(sys.mem.used)"
	sys.log.h2 "Free: ${RESET}$(sys.mem.free)"
	sys.log.h2 "Shared: ${RESET}$(sys.mem.shared)"
	sys.log.h2 "Buffer/Cache: ${RESET}$(sys.mem.buffcache)"
	sys.log.h2 "Available: ${RESET}$(sys.mem.available)"
}

# sys.fs.* - Filesystem specifications

sys.fs.disk() {
	df -P . | sed -n '$s/[[:blank:]].*//p'
}

# sys.disk.* - Disk specifications

sys.disk.total() {
	df -h | grep "$(sys.fs.disk)" | awk '{print $2}'
}

sys.disk.used() {
	df -h | grep "$(sys.fs.disk)" | awk '{print $3}'
}

sys.disk.avail() {
	df -h | grep "$(sys.fs.disk)" | awk '{print $4}'
}

sys.disk.use() {
	if sys.os.mac; then
		df -h | grep "/dev/disk1s1" | awk '{print $5}'
	else
		df -h | grep "$(sys.fs.disk)" | awk '{print $5}'
	fi
}

sys.disk.mounted() {
	df -h | grep "$(sys.fs.disk)" | awk '{print $6}'
}

sys.disk.tostring() {
	sys.log.h1r "Disk:"
	sys.log.h2r "Total: ${RESET}$(sys.disk.total)"
	sys.log.h2 "Used: ${RESET}$(sys.disk.used)"
	sys.log.h2 "Available: ${RESET}$(sys.disk.avail)"
	sys.log.h2 "Use: ${RESET}$(sys.disk.use)"
	sys.log.h2 "Mounted: ${RESET}$(sys.disk.mounted)"
}

# sys.kernel.* - Kernel specifications

sys.kernel.name() {
	uname -s
}

sys.kernel.version() {
	uname -r
}

sys.kernel.tostring() {
	sys.log.h1r "Kernel:"
	sys.log.h2 "Name: ${RESET}$(sys.kernel.name)"
	sys.log.h2 "Version: ${RESET}$(sys.kernel.version)"
}

# sys.os.* - OS specifications

sys.os.mac() {
	if [[ "$OSTYPE" == "darwin"* ]]; then
		return 0
	else
		return 1
	fi
}

sys.os.linux() {
	if [[ "$OSTYPE" == "linux-gnu"* ]]; then
		return 0
	else
		return 1
	fi
}

sys.os.windows() {
	if [[ "$OSTYPE" == "msys" ]]; then
		return 0
	else
		return 1
	fi
}

sys.os.wsl() {
	if [[ "$(uname -r)" == *"Microsoft"* ]]; then
		return 0
	else
		return 1
	fi
}

# sys.host.* - Host specifications

sys.host.name() {
	hostname
}

sys.host.tostring() {
	sys.log.hr1r "HOST: ${RESET}$(sys.host.name)"
	if sys.os.mac; then
		system_profiler SPHardwareDataType
	else
		hostnamectl
	fi
}

# sys.util.* - System utilities

sys.util.webtext() {
	lynx -dump -cookies "$1"
}

sys.util.clipboard() {
	if command -v pbcopy >/dev/null 2>&1; then
		sys.log.info "This has been saved to your clipboard!"
		echo "$1" | pbcopy
	elif command -v xclip >/dev/null 2>&1; then
		sys.log.info "This has been saved to your clipboard!"
		echo "$1" | xclip -selection c
	else
		sys.log.warn "Clipboard not supported on this system, please install xclip or pbcopy."
	fi
}

sys.util.editfile() {
    if sys.shell.zsh; then
        vi "$1"
    else
        gedit "$1"
    fi
}

sys.util.openfile() {
	if sys.os.mac; then
		open $1
	else
		xdg-open "file:///$1"
	fi
}

sys.util.openurl() {
	if sys.shell.zsh; then
		open "$1"
	else
		{
			xdg-open "$1"
		} &> /dev/null
	fi
}

sys.util.empty() {
	if [ "$1" = "" ]; then
		return 0
	else
		return 1
	fi
}

sys.util.inlineread() {
	if sys.shell.zsh; then
		read "input?$1"
	else
		read -rp "$1 " input
	fi
	echo "$input"
}

sys.util.inlinesed() {
	if sys.shell.zsh; then
		sed -i '' "$1" "$2"
	else
		sed -i "$1" "$2"
	fi
}

sys.util.trim() {
	echo "$1" | xargs
}

sys.util.file_regex_search() {
	local dir="$1"
  	local pattern="$2"
	if sys.os.mac; then
		find -E "$dir" -regex "$pattern"
	else
		find "$dir" -regextype posix-extended -regex "$pattern"
	fi
}

sys.dependencies.installed() {
	if [ $(which "$1") != "" ]; then
		# echo "yes"
		return 0
	else
		# echo "no"
		return 1
	fi
}

sys.dependencies.install() {
	if sys.os.mac; then
		sys.log.info "Installing dependencies for macOS..."
		brew update
		brew install xclip jq csvkit lynx tmux
		brew tap teamookla/speedtest
		brew install speedtest --force
		pip3 install -r "${WYX_DIR}/requirements.txt"
	elif sys.os.linux; then
		sys.log.info "Installing dependencies for Linux..."
		sudo apt-get update
		sudo apt-get -y install xclip jq csvkit lynx tmux
		curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash
		sudo apt-get -y install speedtest
		pip3 install -r "${WYX_DIR}/requirements.txt"
	else
		sys.log.error "This OS is not supported"
	fi
}

sys.dependencies.update() {
	if sys.os.mac; then
		sys.log.info "Updating dependencies for macOS..."
		brew update
		brew upgrade xclip jq csvkit
		brew tap teamookla/speedtest
		brew upgrade speedtest --force
		pip3 install -r "${WYX_DIR}/requirements.txt"
	elif sys.os.linux; then
		sys.log.info "Updating dependencies for Linux..."
		sudo apt-get update
		sudo apt-get -y upgrade xclip jq csvkit
		curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash
		sudo apt-get -y upgrade speedtest
		pip3 install -r "${WYX_DIR}/requirements.txt"
	else
		sys.log.error "This OS is not supported"
	fi
}

sys.dependencies.list() {
	if sys.os.mac; then
		sys.log.info "Listing dependencies for macOS..."
		echo ""
		sys.log.h1 "Brew: ${RESET}xclip, jq, csvkit, speedtest, lynx"
		sys.log.h1 "Pip: ${RESET}$(cat "${WYX_DIR}/requirements.txt" | xargs)"
	elif sys.os.linux; then
		sys.log.info "Listing dependencies for Linux..."
		echo ""
		sys.log.h1 "Apt: ${RESET}xclip, jq, csvkit, speedtest, lynx"
		sys.log.h1 "Pip: ${RESET}$(cat "${WYX_DIR}/requirements.txt" | xargs)"
	else
		sys.log.error "This OS is not supported"
	fi
	echo ""
}